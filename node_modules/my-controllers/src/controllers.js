// src/controllers.js
exports.createResource = async (req, res, model) => {
    try {
        const newResource = await model.create(req.body);
        res.status(201).json({ message: 'Resource created successfully', data: newResource });
    } catch (error) {
        res.status(400).json({ message: 'Error creating resource', error: error.message });
    }
};

exports.getAllResources = async (req, res, model) => {
    try {
        const resources = await model.find({});
        res.status(200).json({ message: 'Resources retrieved successfully', data: resources });
    } catch (error) {
        res.status(400).json({ message: 'Error retrieving resources', error: error.message });
    }
};

exports.getResourceById = async (req, res, model) => {
    try {
        const resource = await model.findById(req.params.id);
        if (!resource) {
            return res.status(404).json({ message: 'Resource not found' });
        }
        res.status(200).json({ message: 'Resource retrieved successfully', data: resource });
    } catch (error) {
        res.status(400).json({ message: 'Error retrieving resource', error: error.message });
    }
};

exports.updateResource = async (req, res, model) => {
    try {
        const updatedResource = await model.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedResource) {
            return res.status(404).json({ message: 'Resource not found' });
        }
        res.status(200).json({ message: 'Resource updated successfully', data: updatedResource });
    } catch (error) {
        res.status(400).json({ message: 'Error updating resource', error: error.message });
    }
};

exports.deleteResource = async (req, res, model) => {
    try {
        const deletedResource = await model.findByIdAndDelete(req.params.id);
        if (!deletedResource) {
            return res.status(404).json({ message: 'Resource not found' });
        }
        res.status(200).json({ message: 'Resource deleted successfully' });
    } catch (error) {
        res.status(400).json({ message: 'Error deleting resource', error: error.message });
    }
};

exports.getResourcesByProperty = async (req, res, model, property, value) => {
    try {
        const resources = await model.find({ [property]: value });
        res.status(200).json({ message: 'Resources retrieved successfully', data: resources });
    } catch (error) {
        res.status(400).json({ message: 'Error retrieving resources', error: error.message });
    }
};

exports.searchResources = async (req, res, model, searchTerm) => {
    try {
        const resources = await model.find({ $text: { $search: searchTerm } });
        res.status(200).json({ message: 'Resources retrieved successfully', data: resources });
    } catch (error) {
        res.status(400).json({ message: 'Error searching resources', error: error.message });
    }
};
